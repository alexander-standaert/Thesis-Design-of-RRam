$if sp.debugon
simulator lang=spice
.lib '../../technology_models/tech_wrapper.lib' tt
.OPTIONS METHOD=trap
.TEMP 30

simulator lang=spectre
include "../../technology_models/monte_carlo_models.scs"
include "../../ArchitectureDesign/SPICE/CMOSlogic.scs"
parameters enableMismatch=0
ana tran step=1e-12 stop=2e-08
option1 options rawfmt = psfascii
option2 options dc_pivot_check = yes

cap info what=captab where=file file="%LEDcap"

vin in vss vsource type=pwl wave=[0 1 1e-09 1 1.001e-09 0]
vgnd vss 0 vsource type=dc dc=0
vvdd vdd 0 vsource type=dc dc=1
parameters PWmin = 100n                         //MinimalTransistorWidth
parameters PLmin = 45n                          //MinimalTransistorLenght
$else
simulator lang=spectre
$end

$for i = 1:length(sp.fanout)
$   if round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort)) == 1
subckt buffer_$<sp.buffertype>$_$<int2spelledstring(sp.fanout(i))>$ (vdd vss NBulkLine PBulkLine node_0 node_$<round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort))>$)
xNot_$<sp.fanout(i)>$_1 (node_0 node_1 vdd vss PBulkLine NBulkLine) inverter mult=4
$   elseif mod(round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort)),2) == 0
subckt buffer_$<sp.buffertype>$_$<int2spelledstring(sp.fanout(i))>$ (vdd vss NBulkLine PBulkLine node_0 node_$<round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort))>$)
$       for k = 1:round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort))
xNot_$<sp.fanout(i)>$_$<k>$ (node_$<k-1>$ node_$<k>$ vdd vss PBulkLine NBulkLine) inverter mult=$<sp.sizing(k)>$
$       end
$   else
subckt buffer_$<sp.buffertype>$_$<int2spelledstring(sp.fanout(i))>$ (vdd vss NBulkLine PBulkLine node_0 node_$<round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort))-1>$)
$       for k = 2:round(log10(sp.fanout(i)*sp.cload/3)/log10(sp.stageeffort))
xNot_$<sp.fanout(i)>$_$<k>$ (node_$<k-2>$ node_$<k-1>$ vdd vss PBulkLine NBulkLine) inverter mult=$<sp.sizing(k)>$
$       end
$   end
ends buffer_$<sp.buffertype>$_$<int2spelledstring(sp.fanout(i))>$ 


$end 

$if sp.debugon   
subckt buffer_sized (vdd vss NBulkLine PBulkLine in $<bus('out',sp.fanout)>$)

$   for i = 1:length(sp.fanout)
xbuffer_$<sp.fanout(i)>$ (vdd vss vss vdd in out_$<sp.fanout(i)>$) buffer_$<sp.buffertype>$_$<int2spelledstring(sp.fanout(i))>$
$      for k = 1:sp.fanout(i)
//nor_$<sp.fanout(i)>$_$<k>$ (out_$<sp.fanout(i)>$ vdd norout$<sp.fanout(i)>$_$<k>$ vdd vss PBulkLine NBulkLine) twonor
$       end
cPar_$<sp.fanout(i)>$ out_$<sp.fanout(i)>$ vss capacitor c=$<0.18e-15*sp.fanout(i)>$
$   end 

ends buffer_sized

subckt buffer_notsized (vdd vss NBulkLine PBulkLine in $<bus('out',sp.fanout)>$)

$   for i = 1:length(sp.fanout)
xNot_$<sp.fanout(i)>$_a (in temp_$<sp.fanout(i)>$ vdd vss PBulkLine NBulkLine) inverter mult=1
xNot_$<sp.fanout(i)>$_b (temp_$<sp.fanout(i)>$ out_$<sp.fanout(i)>$ vdd vss PBulkLine NBulkLine) inverter mult=1
$      for k = 1:sp.fanout(i)
//nor_$<sp.fanout(i)>$_$<k>$ (out_$<sp.fanout(i)>$ vdd norout$<sp.fanout(i)>$_$<k>$ vdd vss PBulkLine NBulkLine) twonor
$       end
cPar_$<sp.fanout(i)>$ out_$<sp.fanout(i)>$ vss capacitor c=$<0.18e-15*sp.fanout(i)>$
$   end 

ends buffer_notsized


xbuffer_sized (vdd vss vss vdd in $<bus('out_buffered',sp.fanout)>$) buffer_sized
xbuffer_notsized (vdd vss vss vdd in $<bus('out_notbuffered',sp.fanout)>$) buffer_notsized
save in
$   for i = 1:length(sp.fanout)
save out_buffered_$<sp.fanout(i)>$ 
save out_notbuffered_$<sp.fanout(i)>$ 
$   end 


$end

