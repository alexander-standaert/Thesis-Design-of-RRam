function [] = write_table_RME_QMMODEL( omega_x, V0, voltage_V, omega_y_V, basePlotId )
% function [] = write_table_RME_QMMODEL( omega_x, V0, voltage_V, omega_y_V, basePlotId  )
%
% write verilog-A model cards for the RRAM resistive memory elements (RMEs)
% based on ./RME_QMMODEL_template.va
%
% A lookup-table based models for the requested (omega_x, V0) combination is written:
%    - ../verilog/tableRMEs/RME_QMMODEL_[4_3 digits]THz_[p/m][4_3 digits]uV.va and .table
%      where "p" when V0>=0, "m" when V0<0
%      e.g. omega_x = 7e14, V0=-50mV --> RME_QMMODEL_0000_700THz_m0050_000uV.va
%                                    --> RME_QMMODEL_0000_700THz_m0050_000uV.table
%
% voltage_V and omega_y_v is the range of currents over which the lookup table is created

    baseFilename = constructFilename( 'RME_QMMODEL', omega_x, V0 );
    
    doWriteTable = true;
    if doWriteTable
        fprintf( '----------------------------------------------- \n');
        fprintf( 'WARNING: writing lookup table                   \n');
        fprintf( '         change in write_table_RME_QMMODEL()    \n');
        fprintf( '----------------------------------------------- \n');
        writeTable( baseFilename, omega_x, V0, voltage_V, omega_y_V, basePlotId );                    
    else
        fprintf( '----------------------------------------------- \n');
        fprintf( 'WARNING: writing of the lookup table is skipped \n');
        fprintf( '         change in write_table_RME_QMMODEL()    \n');
        fprintf( '----------------------------------------------- \n');
    end
    
    tableBaseFilename = baseFilename;
    writeVerilog( 'RME_QMMODEL', baseFilename, tableBaseFilename, omega_x, V0 );
    
    baseFilename = constructFilename( 'HOURGLASS', omega_x, V0 );
    writeVerilog( 'HOURGLASS', baseFilename, tableBaseFilename, omega_x, V0 );
    
end

function writeVerilog( templateName, baseFilename, tableBaseFilename, omega_x, V0 )
    sourceFilename = [ templateName '.template.va' ];
        
    information = sprintf( '%s\n%s\n%s\n%s\n%s\n', ...
            '// ------------------------------------------------------------------------------ ', ...
            '// File automatically generated by ./write_RME_QMModels/write_table_RME_QMMODEL.m ', ...                   
            [ '// File          : ' baseFilename   ], ...
            [ '// Creation date : ' datestr( now ) ], ...               
            sprintf( '// Parameters    : omega_x=%5.3fTHz ; V0=%4.3fmV', omega_x/1e12, V0/1e-3 ), ...
            '// ------------------------------------------------------------------------------ ' );
    commands.replace = {};
    commands.replace{end+1} = { '@@information' , information               };
    commands.replace{end+1} = { '@@modelName'   , baseFilename              };
    commands.replace{end+1} = { '@@tableFile'   , [ tableBaseFilename '.table' ] };
    commands.replace{end+1} = { '@@ifTable'     , '   ' }; % do not comment out lines that start with @@ifTable
    commands.replace{end+1} = { '@@ifAnalytical', '// ' }; % comment out lines that start with @@ifAnalytical    
    
    [SUCCESS,MESSAGE,MESSAGEID] = mkdir( 'generated' );
    copyAndParseTemplate( sourceFilename, [ 'generated/' baseFilename '.va' ], commands );
end

   
function writeTable( baseFilename, omega_x, V0, voltage_V, omega_y_V, basePlotId )

    [SUCCESS,MESSAGE,MESSAGEID] = mkdir( 'generated' );
    filename = [ 'generated/' baseFilename '.table' ];
    Vrme = voltage_V;   
    fprintf( 'omega_y (%g:%g) ; Vrme ( %g:%g )\n', min(omega_y_V), max(omega_y_V), min(Vrme),max(Vrme) );
           
    LV = length( Vrme );
    LW = length( omega_y_V );
    description = sprintf( 'lookuptable for V0=%3.3fmV, omega_x=%g ; #V=%d, #wy=%d, points=%d\n', ...
                  V0*1000, omega_x, LV, LW, LV*LW );
    fprintf( description );
       
    
    fid=fopen( filename, 'w' );
    fprintf( fid, '# %s \n', description );
    fprintf( fid, '# omega_y     Vrme   -->  current\n' );
    
    for i=1:length( omega_y_V ) 
        omega_y = omega_y_V( i);
        
        fprintf( '----------- omega_y=%g\n', omega_y );
        
        params.V0      = V0;
        params.omega_x = omega_x;
        params.omega_y = omega_y;
        
        %rme = getHfOxRME( Vrme, params, 100, 0 );
        rme = getHfOxRME( Vrme, params, 200, 0 );
        
        IV_java = rme.V_to_I;
        Irme = IV_java.getYValues();
        
        if( basePlotId )
            figure( basePlotId + 1 );
            plot( Vrme, Irme/1e-6, nextStyle(), 'displayName', sprintf( 'omega_y=%g', omega_y ) );
            hold on;

            figure( basePlotId + 2 );
            semilogy( Vrme, abs(Irme)/1e-6, nextStyle(), 'displayName', sprintf( 'omega_y=%g', omega_y ) );
            hold on;
        end
        for j=1:length( Vrme ) 
            voltage = Vrme( j );
            current = Irme( j );            
            fprintf( fid, '%g  %g  %g\n',omega_y, voltage, current );
        end
    end
    if basePlotId
        for i=[1 2]
            figure( basePlotId + i );
            grid on;
            xlabel( 'voltage [V]' );
            ylabel( 'current [uA]' );
            legend show;
        end
    end
    fclose( fid );

end


function [ baseFilename ] = constructFilename( basename, omega_x, V0 ) 
% RME_QMMODEL_0000_700THz_m0050_000uV
    if V0<0
        sign_S = 'm'; %minus
    else
        sign_S = 'p'; %plus
    end
    omega_x_S = [ constructDigitString( omega_x/1e12, 4, 3 ) 'THz' ];
    V0_S      = [ constructDigitString( abs(V0)/1e-6, 4, 3 ) 'uV' ];
        
    baseFilename = [ basename '_' omega_x_S '_' sign_S V0_S ];
end

function [ digitString ] = constructDigitString( value, digitsBefore, digitsAfter )

    value = round(value);

    lowestPart = mod( value, 10^digitsAfter );    
    highestPart = floor( value/10^digitsAfter );
    
    digitString = [ fixedNumberOfDigits( highestPart, digitsBefore, '0' ) '_' ...
                    fixedNumberOfDigits( lowestPart , digitsAfter , '0' ) ];
                
end

function [ string ] = fixedNumberOfDigits( value, numberOfDigits, padSymbol )
%function [ string ] = fixedNumberOfDigits( value, numberOfDigits, padSymbol )
%
%  padSymbol='0', numberOfDigits=5, value=13 gives
%    00013
%
%  if the number does not fit in het provided numberOfDigits, more
%  digits are used.


  test = sprintf( '%d', value );
  L= length(test);

  for i=(L+1):numberOfDigits
    test=sprintf( '%s%s', padSymbol, test );
  end

  string = test;
end
