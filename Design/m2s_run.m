function m2s = m2s_run(m2s,sp);function m2s_outstr = m2s_arg2str(m2s_instr);m2s_outstr = m2s_instr;for m2s_I=1:length(m2s_instr);if isnumeric(m2s_instr{m2s_I});if length(m2s_instr{m2s_I})>1m2s_outstr{m2s_I} = mat2str(m2s_instr{m2s_I},8);m2s_outstr{m2s_I} = m2s_outstr{m2s_I}(2:end-1);else;m2s_outstr{m2s_I} = num2str(m2s_instr{m2s_I},8);end;elseif islogical(m2s_instr{m2s_I});if length(m2s_instr{m2s_I})>1m2s_outstr{m2s_I} = mat2str(m2s_instr{m2s_I});m2s_outstr{m2s_I} = m2s_outstr{m2s_I}(2:end-1);else;m2s_outstr{m2s_I} = mat2str(m2s_instr{m2s_I});end;end;end;end;function m2s_outstr=m2s_cell2str(m2s_instr);m2s_outstr=cell2mat(cellfun(@(m2s_x) [m2s_x sprintf('\n')],m2s_instr,'UniformOutput',0));m2s_outstr=m2s_outstr(1:end-1);end;function varargout = m2s_emptyfn(varargin);throwAsCaller(MException('M2S:FnErr','function called before it has been initialized with $include, $insert or $import'));end;
m2s_file_setreset_sweep();
function m2s_file_setreset_sweep(); m2s.setreset_sweep.currentline = 0;function m2s_write(m2s_format,m2s_args);m2s_args=m2s_arg2str(m2s_args);if iscell(m2s_format);m2s_format=m2s_cell2str(m2s_format);end;m2s.setreset_sweep.currentline=m2s.setreset_sweep.currentline+1;m2s.setreset_sweep.outstr{m2s.setreset_sweep.currentline}=sprintf(m2s_format,m2s_args{:});end;
m2s_write('* ===== set-reset triangular sweep',{});
m2s_write('* =============================================================',{});
m2s_write('* ===== simulation of triangular set/reset sweeps with series R ',{});
m2s_write('* ===== as performed by Andrea Fantini',{});
m2s_write('* =============================================================',{});
m2s_write('* - writeNetlist.m          : matlab script that transforms this m2s file',{});
m2s_write('*                             into a regular spice file by the',{});
m2s_write('* - performSimulations.sh   : simulates generated netlist using spectre',{});
m2s_write('* - plotSimulationResults.m : plot simulation results using',{});
m2s_write('* - cleanIt.sh              : remove all automatically generated files',{});
m2s_write('*',{});
m2s_write('* Author: Stefan Cosemans [imec]',{});
m2s_write('* Date  : 2012-11-06',{});
m2s_write('',{});
m2s_write('* include verilog components [path is relative to generated netlist]',{});
m2s_write('*.hdl "../../../../verilog/RME_QMMODEL_ANALYTICAL/HOURGLASS.va"',{});
m2s_write('.hdl "%s"',{sp.modelFile});
m2s_write('',{});
m2s_write('* Settings from matlab {{{1',{});
m2s_write('.param Rload     = %s',{sp.Rload});
m2s_write('.param Cload     = %s',{sp.Cload});
m2s_write('.param n_CO      = %s',{sp.n_CO});
m2s_write('.param n_BR      = %s',{sp.n_BR});
m2s_write('.param n_TR      = %s',{sp.n_TR});
m2s_write('.param TR_size   = %s',{sp.TR_size});
m2s_write('.param BR_size   = %s',{sp.BR_size});
m2s_write('.param omega_x   = %s',{sp.omega_x});
m2s_write('.param omega_y_0 = %s',{sp.omega_y_0});
m2s_write('.param V0        = %s',{sp.V0});
m2s_write('.param Tambient  = %s',{sp.Tambient});
m2s_write('.param Rthermal  = %s',{sp.Rthermal});
m2s_write('.param c_thermal = %s',{sp.c_thermal});
m2s_write('.param Ea        = %s',{sp.Ea});
m2s_write('.param alpha_0   = %s',{sp.alpha_0});
m2s_write('.param m_n       = %s',{sp.m_n});
m2s_write('.param f0        = %s',{sp.f0});
m2s_write('',{});
m2s_write('.param enable_stochastics = %s',{sp.enable_stochastics});
m2s_write('.param initial_seed       = %s',{sp.initial_seed});
m2s_write('.param flux_limit        = %s',{sp.flux_limit});
m2s_write('.param progressPrintStep = %s',{sp.progressPrintStep});
m2s_write('.param time_step_bound   = %s ',{sp.time_step_bound});
m2s_write('',{});
m2s_write('.param Vmax      = %s',{sp.Vmax});
m2s_write('.param Vmin      = %s',{sp.Vmin});
m2s_write('.param Ttop      = %s',{sp.Ttop});
m2s_write('.param Ttop2     = %s',{sp.Ttop2});
m2s_write('.param Tmid      = %s',{sp.Tmid});
m2s_write('.param Tbottom   = %s',{sp.Tbottom});
m2s_write('.param Tbottom2  = %s',{sp.Tbottom2});
m2s_write('.param Tcycle    = %s',{sp.Tcycle});
m2s_write('.param Tstop     = %s',{sp.Tstop});
m2s_write(' ',{});
m2s_write('* }}}1 settings',{});
m2s_write('',{});
m2s_write('* {{{1 circuit',{});
m2s_write('Vexternal external  0 DC  %s',{sp.PWLstatement});
m2s_write('* PWL( 0 0   Ttop Vmax   Tend 0 )',{});
m2s_write('Vmin      min       0 DC  0',{});
m2s_write('',{});
m2s_write('Rload  external      top_electrode   Rload',{});
 if sp.Cload>0
m2s_write('Cdummy top_electrode 0               Cload ',{});
 end
m2s_write('',{});
m2s_write('Xrme  top_electrode min %s',{sp.model});
m2s_write('+ V0        = V0',{});
m2s_write('+ omega_x   = omega_x',{});
m2s_write('+ omega_y_0 = omega_y_0',{});
m2s_write('+',{});
m2s_write('+ N_TR = TR_size',{});
m2s_write('+ N_BR = BR_size',{});
m2s_write('+ ',{});
m2s_write('+ initial_n_CO = n_CO',{});
m2s_write('+ initial_n_TR = n_TR',{});
m2s_write('+ initial_n_BR = n_BR',{});
m2s_write('+',{});
m2s_write('+ Ea           = Ea',{});
m2s_write('+ Tambient     = Tambient',{});
m2s_write('+ Rthermal     = Rthermal',{});
m2s_write('+ c_thermal    = c_thermal',{});
m2s_write('+ alpha_0      = alpha_0',{});
m2s_write('+ f0           = f0',{});
m2s_write('+ m_n          = m_n',{});
m2s_write('+',{});
m2s_write('+ enable_stochastics       = enable_stochastics',{});
m2s_write('+ initial_seed             = initial_seed',{});
m2s_write('+ flux_limit               = flux_limit',{});
m2s_write('+ progressPrintStep        = progressPrintStep',{});
m2s_write('+ time_step_bound          = time_step_bound',{});
m2s_write('+ verbose_logfile          = %s    ',{sp.verbose_logfile});
m2s_write('+ Nmax                     = 50',{});
m2s_write('',{});
m2s_write('* }}}1',{});
m2s_write('',{});
m2s_write('* simulation statements {{{1',{});
m2s_write('* -------------------------------------------------------------',{});
m2s_write('* -------------------------------------------------------------',{});
m2s_write('**.option POST=2 * enable this if you want to use a waveviewer',{});
m2s_write('*.OPTION CSDF    * enable this (and disable POST=2) when you want to use matlab',{});
m2s_write('*.option ACCURATE',{});
m2s_write('*.probe tran v(*) i(*) v(*.*)',{});
m2s_write('*.tran step=1e-12 stop=Tend',{});
m2s_write('',{});
m2s_write('* settings for spectre to save the internal rme variables',{});
m2s_write('*',{});
m2s_write('simulator lang=spectre',{});
m2s_write('setting1 options save=all',{});
m2s_write('//option1 options rawfmt = psfascii     // overruled by using spectreUWI',{});
m2s_write('//transient1 tran stop=Tstop errpreset=conservative',{});
m2s_write('transient1 tran stop=Tstop',{});
m2s_write('simulator lang=spice',{});
m2s_write('* }}}1',{});
m2s_write('',{});
m2s_write('.end',{});
end
end