Little-endian replacements for DataInputStream,
DataOutputStream and RandomAccessFile. They work just like
DataInputStream, DataOutputStream and RandomAccessFile
except they work with little-endian binary data. Normally
Java binary I/O is done with big-endian data, with the most
significant byte of an integer or float first. Intel and
Windows 95 tend to work with little endian data in native
files. LEDataInputStream, LEDataOutputStream and
LERandomAccessFile will let you read and write such files.
Source code provided.

The java.nio (new I/O) package that is new with JDK1.4 has
ByteBuffer and friends that support big and little endian.
That way you don't need LEDataStream.  LEDataStream is
simpler.

Note that  LEDatastream.read(byte b[], int off, int len) is
exactly the same as DataStream.read((byte b[], int off, int
len).  With bytes, there is no difference between big and
little endian data.  LEDatastream.read does NOT reverse the
order of the bytes read!

For background see http://mindprod.com/jgloss/endian.html

Version 1.6 just deprecates the readLine method in keeping with the
deprecation of the underlying DataInput.readLine method.

Why the egg icon?  In Jonathan Swift's Gulliver's Travels,
two countries fought over which end of the end was best to
break it, the little or big end, mirroring the struggle
between the users of little and big endian binary formats.
See http://mindprod.com/jgloss/endian.html

----

Version History:

1.8 2007-05-24 adds a PAD and icon. It passes
Intellij inspector. Complete the JavaDoc.

-30-

