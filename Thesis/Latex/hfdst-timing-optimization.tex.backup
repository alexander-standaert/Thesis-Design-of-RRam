\chapter{Timing en optimalizatie}
\label{timing-optimization}
Voor een correcte werking van het geheugen, is het van belang dat de verschillende controlesignalen in een bepaalde volgorde verwerkt en doorgegeven worden.
Bovendien is er ruimte voor optimalisatie door al de signalen even snel te maken als het critisch pad. In het eerste deel van dit hoofdstuk zal de invloed van architecture en sizing onderzocht worden op de timing van de signalen. De constraints en vrijheidsgraden die hier uit volgen zullen dan gebruikt worden in het tweede deel van dit hoofdstuk om een optimale architecture te vinden.

\section{Timing}
Het ontwerp van dit geheugen gaat tot het niveau van het globalblock \ref{globalblock}, hierbij wordt de veronderstelling gemaakt dat alle signalen tegelijkertijd binnen komem in het globelblock. Hierna propageren de signalen door logica tot ze verschillende transistoren rond de BL aansturen. De aansturing van deze transistoren omvatten de eerste critische timing constraints. Vervolgens worden de muxen en SA aangesloten, deze zullen de tweede timing constraints bevatten.

\subsection{Critische timing voor het (de)selecteren cell}
\paragraph{}
Timings problemen rond het (de)selecteren van de cell komen door het een verschill in timing voor het (de)selecteren van de load en cell. Indien de load geselecteerd wordt voor de cell zal de bitline vroegtijdig beginnen opladen naar de voedingspanning. Wanneer de cell dan geselecteert is zal de bitline naar een betekenis volle spanning getrokken worden. Afhankelijk van het tijds verschill tussen deze twee evenementen, zal de bitlijn terug omlaag getrokken worden, wat resulteert in een energie verspilling. Dit wordt geillustreerd in figuur \ref{fig:critisch_timing1}. Indien de cell gedeselecteert wordt voordat de load gedeselecteerd is, Zal de bitline ook opladen naar de voedingspanning. Dit heeft als gevolg dat het ontladen van de bitlijn langer zal duren en de overbodige oplading resulteert ook in een energie verspilling. Door de keuze van logica (zie figure TODO) zal afhankelijk van het tijds verschill, de mux te vroeg worden afgeschakelt. Waardoor de knoop achter de mux niet volledig ontladen zal zijn. Dit heeft geen nadelige gevolgen door dat de capaciteit op dit knooppunt heel klein is en er bijgevolge een verwaarloosbare ladings injectie is in de volgende lees cyclus. Al dit word geillustreert in figure \ref{fig:critisch_timing2}.  


\begin{figure}[h!]
\centering
\subfloat[]{ \includegraphics[width=0.5\textwidth] {../fig/hfdstk-timing-crit1.png} \label{fig:critisch_timing1}}
\subfloat[]{ \includegraphics[width=0.5\textwidth] {../fig/hfdstk-timing-crit2.png} \label{fig:critisch_timing2}}
\caption{Timing problemen bij de bitlijn}
\end{figure}

\paragraph{}
De timing begint in het globalblock. Het circuit en timings diagram word geillustreerd in figuren \ref{fig:gb_timing1} en \ref{fig:gb_timing2}. T1 en T2 stellen het moment voor dat de signalen uit de Bitlijn en Woordlijn decoder komen. T3 stelt het moment voor dat het signaal uit de referentie buffer komt. T1 en T3 zou op het zelfde moment moeten aankomen om een optimale timing te hebben. Indien dit niet het geval is zal de referentie bitlijnen al aanstaan vooralleer de cell bitlijn aan komt te staan. Indien er een groot aantal referentie bitlijnen zijn zal dit resulteren in een grote energie verspilling. Om deze timing te verwezelijken zijn er twee opties. De eerste is het kiezen van een kleine bitlijn decoder en een grote woordlijn decoder. Dit zal voor een kleine T1 zorgen door een kleine delay in de bitlijn decoder. Dit zal een grotere T3 geven door dat de referentie buffer meer capaciteit heeft om op te laden. Een evenwicht kan zo gevonden worden om T1 en T3 op het zelfde moment te doen verschijnen. Deze eerste optie beperkt de mogelijke architecture intensief en zal timings constraints voor T2 teniet doen zoals later zal blijken. De tweede optie voor het matchen van T1 en T3 is het vertragen van T3. Een vertraging kan gerealiseert worden door het invoeren van delay elementen of door het verslechteren van de buffer. In practijk is ondervonden dat het invoeren van vertragings element meestal een te grote delay introduceert. Vandaar dat in de final design een buffer werdt gemaakt die niet optimaal is naar snelheid. Om het energie verbruik van de referentie bitlijnen verder te verminderen werden niet al de bitlijnen in de array gebruikt voor het generen van het referentie signaal.

\begin{figure}[!ht]
  \centering
  \includegraphics[scale=0.6]{../fig/hfdstk-timing-gb1.png}
  \caption{Globalblock}
  \label{fig:gb_timing1}
\end{figure}

\begin{figure}[!ht]
  \centering
  \includegraphics[scale=0.9]{../fig/hfdstk-timing-gb2.png}
  \caption{Timing globalblock}
  \label{fig:gb_timing2}
\end{figure}

\paragraph{}
Eens de sigalen uit de decoders komen worden deze gevoed in de controle logica voor de memory array. Het circuit en timing diagram is geillustreerd in figuren \ref{fig:lbcell_timing1} en \ref{fig:lbcell_timing2}. Bij het aanschakelen van de cell zouden de cell vroeger of tegelijk als de last moeten geschakelt worden. Op het timings diagram wordt dit geillustreert als T4 = T5 = T6. Door de implementatie van de logica is dit niet mogelijk aangezien er altijd een inverter vertraging verschil is tussen T4 en T5. Deze vertraging is minimaal en kan getollereerd worden door dat de bitlijn in elk geval moet op geladen worden tot minimum $V_{LRS}$. Bij lage voedingspanningen komt dit probleem daarentegen terug boven. T6 wordt bepaalt door woordlijn decoder en woordlijn buffers. Deze vertraging zou zo gemaakt moeten worden dat deze vroeger of gelijk met T5 valt. Bij het afschakelijke van de cell zijn de omgekeerde voorwaarden nodig namelijk, De last zou vroeger of gelijk als de cell moeten afgeschakelt moeten worden. Deze voorwaarde is voldaan als T7 voor T8 en T9 komt. Door de inverter is T7 altijd voor T8, T9 daarentegen word bepaalt door de woordlijn decoder en buffer en zou voor T7 moeten komen. \\
De timing van de controle logica voor de memory array staat in het circuit vast op de timing van de woordlijn na. Deze moet moet geselecteerd worden voor de sourcelijn geselecteerd is en moet gedeselecteerd worden na dat de last gedeselecteerd is. De timing van de woordlijn wordt expliciet bepaalt door de grote van de woordlijn decoder en impliciet door de grote van de bitlijn decoder dat de grote van de woordlijn buffer bepaalt. Figure \ref{fig:decoder_dep} geeft de delay van verschillende grotes van woorlijn decoders + buffer ifv verschillende grotes van bitlijn decoders weers ... TODO

\begin{figure}[!ht]
  \centering
  \includegraphics[scale=0.6]{../fig/hfdstk-timing-lbcell1.png}
  \caption{Localblock}
  \label{fig:lbcell_timing1}
\end{figure}

\begin{figure}[!ht]
  \centering
  \includegraphics[scale=0.9]{../fig/hfdstk-timing-lbcell2.png}
  \caption{Timing localblock}
  \label{fig:lbcell_timing2}
\end{figure}

\begin{figure}[!ht]
  \centering
  \includegraphics[scale=0.6]{../fig/hfdstk-timing-decoder-dep.png}
  \caption{Timing localblock}
  \label{fig:decoder_dep}
\end{figure}

\subsection{Critische timing voor het uitlezen van de cell}

\section{Analyse verschillende geheugenconfiguraties}


\section{Besluit}
